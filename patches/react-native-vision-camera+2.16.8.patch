diff --git a/node_modules/react-native-vision-camera/android/build.gradle b/node_modules/react-native-vision-camera/android/build.gradle
index ddfa243..d9ada10 100644
--- a/node_modules/react-native-vision-camera/android/build.gradle
+++ b/node_modules/react-native-vision-camera/android/build.gradle
@@ -321,6 +321,12 @@ dependencies {
   implementation "androidx.camera:camera-extensions:1.1.0"
 
   implementation "androidx.exifinterface:exifinterface:1.3.3"
+
+
+  // Lifecycle dependency
+
+
+  implementation "androidx.lifecycle:lifecycle-common:2.8.7"
 }
 
 
@@ -334,7 +340,7 @@ if (ENABLE_FRAME_PROCESSORS) {
   def thirdPartyVersions = new Properties()
   thirdPartyVersions.load(new FileInputStream(thirdPartyVersionsFile))
 
-  def BOOST_VERSION = thirdPartyVersions["BOOST_VERSION"]
+  def BOOST_VERSION = "1_85_0"
   def boost_file = new File(downloadsDir, "boost_${BOOST_VERSION}.tar.gz")
   def DOUBLE_CONVERSION_VERSION = thirdPartyVersions["DOUBLE_CONVERSION_VERSION"]
   def double_conversion_file = new File(downloadsDir, "double-conversion-${DOUBLE_CONVERSION_VERSION}.tar.gz")
diff --git a/node_modules/react-native-vision-camera/android/gradle.properties b/node_modules/react-native-vision-camera/android/gradle.properties
index 16e9a86..03ec8ce 100644
--- a/node_modules/react-native-vision-camera/android/gradle.properties
+++ b/node_modules/react-native-vision-camera/android/gradle.properties
@@ -14,7 +14,7 @@
 VisionCamera_buildToolsVersion=30.0.0
 VisionCamera_compileSdkVersion=31
 VisionCamera_minSdkVersion=23
-VisionCamera_kotlinVersion=1.6.20
+VisionCamera_kotlinVersion=2.1.21
 VisionCamera_targetSdkVersion=31
 VisionCamera_ndkVersion=21.4.7075529
 android.enableJetifier=true
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+RecordVideo.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+RecordVideo.kt
index 14ee747..1d69ebe 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+RecordVideo.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView+RecordVideo.kt
@@ -49,37 +49,6 @@ fun CameraView.startRecording(options: ReadableMap, onRecordCallback: Callback)
     recording = recording.withAudioEnabled()
   }
 
-  activeVideoRecording = recording.start(ContextCompat.getMainExecutor(context), object : Consumer<VideoRecordEvent> {
-    override fun accept(event: VideoRecordEvent?) {
-      if (event is VideoRecordEvent.Finalize) {
-        if (event.hasError()) {
-          // error occured!
-          val error = when (event.error) {
-            VideoRecordEvent.Finalize.ERROR_ENCODING_FAILED -> VideoEncoderError(event.cause)
-            VideoRecordEvent.Finalize.ERROR_FILE_SIZE_LIMIT_REACHED -> FileSizeLimitReachedError(event.cause)
-            VideoRecordEvent.Finalize.ERROR_INSUFFICIENT_STORAGE -> InsufficientStorageError(event.cause)
-            VideoRecordEvent.Finalize.ERROR_INVALID_OUTPUT_OPTIONS -> InvalidVideoOutputOptionsError(event.cause)
-            VideoRecordEvent.Finalize.ERROR_NO_VALID_DATA -> NoValidDataError(event.cause)
-            VideoRecordEvent.Finalize.ERROR_RECORDER_ERROR -> RecorderError(event.cause)
-            VideoRecordEvent.Finalize.ERROR_SOURCE_INACTIVE -> InactiveSourceError(event.cause)
-            else -> UnknownCameraError(event.cause)
-          }
-          val map = makeErrorMap("${error.domain}/${error.id}", error.message, error)
-          onRecordCallback(null, map)
-        } else {
-          // recording saved successfully!
-          val map = Arguments.createMap()
-          map.putString("path", event.outputResults.outputUri.toString())
-          map.putDouble("duration", /* seconds */ event.recordingStats.recordedDurationNanos.toDouble() / 1000000.0 / 1000.0)
-          map.putDouble("size", /* kB */ event.recordingStats.numBytesRecorded.toDouble() / 1000.0)
-          onRecordCallback(map, null)
-        }
-
-        // reset the torch mode
-        camera!!.cameraControl.enableTorch(torch == "on")
-      }
-    }
-  })
 }
 
 @SuppressLint("RestrictedApi")
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt
index 3a5abae..b48c7be 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/CameraView.kt
@@ -269,9 +269,8 @@ class CameraView(context: Context, private val frameProcessorThread: ExecutorSer
   private external fun initHybrid(): HybridData
   private external fun frameProcessorCallback(frame: ImageProxy)
 
-  override fun getLifecycle(): Lifecycle {
-    return lifecycleRegistry
-  }
+  override val lifecycle: Lifecycle
+    get() = lifecycleRegistry
 
   /**
    * Updates the custom Lifecycle to match the host activity's lifecycle, and if it's active we narrow it down to the [isActive] and [isAttachedToWindow] fields.
diff --git a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/frameprocessor/FrameProcessorRuntimeManager.kt b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/frameprocessor/FrameProcessorRuntimeManager.kt
index 48b85ca..fcd4ea3 100644
--- a/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/frameprocessor/FrameProcessorRuntimeManager.kt
+++ b/node_modules/react-native-vision-camera/android/src/main/java/com/mrousavy/camera/frameprocessor/FrameProcessorRuntimeManager.kt
@@ -11,7 +11,9 @@ import com.mrousavy.camera.CameraView
 import com.mrousavy.camera.ViewNotFoundError
 import java.lang.ref.WeakReference
 import java.util.concurrent.ExecutorService
+import com.facebook.react.common.annotations.FrameworkAPI
 
+@OptIn(FrameworkAPI::class)
 @Suppress("KotlinJniMissingFunction") // I use fbjni, Android Studio is not smart enough to realize that.
 class FrameProcessorRuntimeManager(context: ReactApplicationContext, frameProcessorThread: ExecutorService) {
   companion object {
